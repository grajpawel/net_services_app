@page "/sensors"

@using System.Text.Json
@using Dashboard.Data
@using Dashboard.Dtos
@using System.Globalization
@using System.IO
@using System.Text
@using ChartJs.Blazor.BarChart
@inject TableController Controller
@inject IJSRuntime JsRuntime

<h1>Sensors data</h1>

@if (_data == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <Chart Config="_barConfig" @ref="_chart"></Chart>
    
    <br/>
    <button @onclick="DownloadCsv">Download CSV</button>
    <button @onclick="DownloadJson">Download JSON</button>
    <br/>
    <br/>
    
    <table>
        <thead>
        <tr>
                <th>
                    sensor type
                    <form method ="post">
                        <select name="number" @bind="CheckType">
                            <option value="">Select a filter</option>
                            @foreach (var type in _data
                                .Select(x => x.type)
                                .Distinct())
                            {
                                <option value="@type">@type</option>
                            }
                        </select>
                    </form>
                </th>
            <th>sensor id
                    <form method="post">
                        <select name="number" @bind="CheckId">
                            <option value=-1>Select an ID</option>
                            @foreach(var id in _data
                                .Select(x => x.SensorId)
                                .Distinct()
                                .OrderBy(x => x))
                            {
                                <option value=@id>@id</option>
                            }
                        </select>
                    </form>
            </th>
            <th>read date
                <form method="post">
                    <select name="number" @bind="CheckAfter">
                        <option value="@DateTime.MinValue">after</option>
                        @foreach (var date in _data
                            .Select(x => x.Time)
                            .DistinctBy(x => x.ToLongTimeString())
                            .OrderBy(x => x))
                        {
                            <option value="@date">@date</option>
                        }
                    </select>
                </form>
                
                <br/>
                
                <form method="post">
                    <select name="number" @bind="CheckBefore">
                        <option value="@DateTime.MaxValue">before</option>
                        @foreach (var date in _data
                            .Select(x => x.Time)
                            .DistinctBy(x => x.ToLongTimeString())
                            .OrderBy(x => x))
                        {
                            <option value="@date">@date</option>
                        }
                    </select>
                </form>
            </th>
            <th>value</th>
            <th>direction</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var h in @_filteredData)
        {
            <tr>
                <td>@h.type</td>
                <td>@h.SensorId</td>
                <td>@h.Time</td>
                <td>@h.Value</td>
                @if (h.Direction != -1)
                {
                    <td>@h.Direction</td>
                }
                else
                {
                    <td>N.D.</td>
                }
            </tr>
        }
        </tbody>
    </table>
    
    <style>
        table {
            border-collapse: collapse;
            margin:  0 1px 20px 1px;
            text-align: center;
        }
        
        td {
            border: 5px solid black;
            width: 100px;
        }
        
        th {
            background-color: yellow;
            padding: 5px;
            border:  5px solid black;
        }
    </style>
}


@code
{
    private IList<ISensorDto> _data;

    private IList<ISensorDto> _filteredData;

    private BarConfig _barConfig;

    private Chart _chart;

    public enum FilterType
    {
        Type,
        Id,
        Date
    }
    
    private string SelectedType { get; set; } = "";
    private string CheckType
    {
        get => SelectedType;
        set
        {
            ChangeEventArgs selectedEventArgs = new ChangeEventArgs
            {
                Value = value
            };
            SelectedType = selectedEventArgs.Value.ToString();
            SendFilters();
        }
    }
    
    private DateTime SelectedAfter { get; set; } = DateTime.MinValue;

    private DateTime CheckAfter
    {
        get => SelectedAfter;
        set
        {
            ChangeEventArgs selectedEventArgs = new ChangeEventArgs
            {
                Value = value
            };
            SelectedAfter = (DateTime)selectedEventArgs.Value;
            SendFilters();
        }
    }

    private DateTime SelectedBefore { get; set; } = DateTime.MaxValue;

    private DateTime CheckBefore
    {
        get => SelectedBefore;
        set
        {
            ChangeEventArgs selectedEventArgs = new ChangeEventArgs
            {
                Value = value
            };
            SelectedBefore = (DateTime)selectedEventArgs.Value;
            SendFilters();
        }
    }

    private int SelectedId { get; set; } = -1;
    private int CheckId
    {
        get => SelectedId;
        set
        {
            ChangeEventArgs selectedEventArgs = new ChangeEventArgs
            {
                Value = value
            };
            if (selectedEventArgs.Value.ToString() != string.Empty)
            {
                SelectedId = int.Parse(selectedEventArgs.Value.ToString() ?? string.Empty);
            }
            SendFilters();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // _data = await Controller.FetchData();
        _data = await Controller.SortByDate(false);
        _filteredData = _data;
        ConfigurePieConfig();
    }

    private void ConfigurePieConfig()
    {
        _barConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Average values of sensors"
                },
                Legend = new Legend
                {
                    Position = Position.Top
                }
            }
        };

        _barConfig.Data.Datasets.Clear();
        _barConfig.Data.Labels.Clear();
        foreach (var id in _filteredData.Select(x => x.SensorId).Distinct().OrderBy(x => x))
        {
            var data = _filteredData.Where(x => x.SensorId.Equals(id));
            List<decimal> typeData = new List<decimal>();
            foreach (var type in data.Select(x => x.type).Distinct())
            {
                typeData.Add(data.Where(x => x.type.Equals(type)).Select(x => x.Value).Average());
            }
            IDataset<decimal> dataset = new BarDataset<decimal>(typeData)
                {
                    Label = id.ToString(),

                    BackgroundColor = ColorUtil.RandomColorString()
                };
            _barConfig.Data.Datasets.Add(dataset);

        }
        foreach (var type in _filteredData.Select(x => x.type).Distinct())
        {
            _barConfig.Data.Labels.Add(type);

        }
    }

    private void UpdatePieConfig()
    {
        _barConfig.Data.Datasets.Clear();
        _barConfig.Data.Labels.Clear();
        foreach (var id in _filteredData.Select(x => x.SensorId).Distinct().OrderBy(x => x))
        {
            var data = _filteredData.Where(x => x.SensorId.Equals(id));
            List<decimal> typeData = new List<decimal>();
            foreach (var type in data.Select(x => x.type).Distinct())
            {
                typeData.Add(data.Where(x => x.type.Equals(type)).Select(x => x.Value).Average());
            }
            IDataset<decimal> dataset = new BarDataset<decimal>(typeData)
                {
                    Label = id.ToString(),

                    BackgroundColor = ColorUtil.RandomColorString()
                };
            _barConfig.Data.Datasets.Add(dataset);

        }
        foreach (var type in _filteredData.Select(x => x.type).Distinct())
        {
            _barConfig.Data.Labels.Add(type);

        }
        _chart.Update();
    }

    private async Task SendFilters()
    {
        _filteredData = await Controller.ApplyFilters(SelectedType, SelectedId, SelectedAfter, SelectedBefore);
        UpdatePieConfig();
    }

    private string CurrentDataToCsvFormat()
    {
        var csv = new StringBuilder();
        String header = "sensor type;sensor id;read date;value;direction";
        csv.AppendLine(header);
        
        foreach (var record in _filteredData)
        {
            var direction = record.Direction == -1 ? "N.D" : record.Direction.ToString(CultureInfo.CurrentCulture);
            var line = $"{record.type};{record.SensorId};{record.Time};{record.Value};{direction}";
            csv.AppendLine(line);
        }
        return csv.ToString();
    }

    private string CurrentDataToJsonFormat()
    {
        var dto = new CurrentDataDto(_filteredData);
        var str = JsonSerializer.Serialize(dto);
        return str;
    }

    private Stream GetCsvStream()
    {
        var tmp = Encoding.UTF8.GetBytes(CurrentDataToCsvFormat());
        return new MemoryStream(tmp);
    }

    private Stream GetJsonStream()
    {
        var tmp = Encoding.UTF8.GetBytes(CurrentDataToJsonFormat());
        return new MemoryStream(tmp);
    }

    private async Task DownloadCsv()
    {
        var stream = GetCsvStream();
        var fileName = "data.csv";

        using var streamRef = new DotNetStreamReference(stream: stream);
        await JsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private async Task DownloadJson()
    {
        var stream = GetJsonStream();
        var fileName = "data.json";

        using var streamRef = new DotNetStreamReference(stream: stream);
        await JsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
}
